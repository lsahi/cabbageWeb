<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd">

    <!--<context:component-scan base-package="top.mothership.cabbage.mapper"/>-->
    <!-- Spring+Mybatis步骤-->
    <!--1.设置单独属性文件放置数据库地址密码，实现解耦，后面的true是为了实现多个配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"  ignore-unresolvable="true" order="1"/>
    <!-- 下面的druid配置都是基本配置,具体优化设置可以上网查询,也可以去github上面直接搜索druid -->
    <!-- 2.数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="${jdbcURL}"/>
        <property name="username" value="${jdbcUser}"/>
        <property name="password" value="${jdbcPwd}"/>
         <!--配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="1000" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

        <property name="defaultAutoCommit" value="true" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />
        <!-- ******重要的配置：监控统计拦截的filters,日志记录 *start* ******-->
        <!-- 并在filters属性中配置了log4j，ref中的bean是下面拦截器的配置 -->
        <!-- proxyFilters和filters是组合关系,前者是根据bean配置,后者根据别名配置的-->
        <!-- stat是statfilter的别名,log4j是logFilter的别名-->
        <!-- 监控统计拦截的filters,日志记录,这里开启了stat,wall（sql翻过墙过滤监控）,log4j（log4j的监控）配置 -->
        <property name="filters" value="stat" />
        <property name="proxyFilters">
            <list>
                <ref bean="logFilter" />
            </list>
        </property>
    </bean>

    <!-- 上面的druid的配置 -->
    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4j2Filter">
        <property name="statementExecutableSqlLogEnable" value="false" />
    </bean>
    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!--指定bean包-->
        <property name="typeAliasesPackage" value="top.mothership.cabbage.pojo"/>
        <!--还是需要一个配置的-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定TypeHandler包-->
        <property name="typeHandlersPackage" value="com.github.javaplugs.mybatis" />
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="top.mothership.cabbage.mapper"/>
    </bean>

    <!-- 5）jedis 配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
    </bean>
    <!-- redis服务器中心 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig"/>
        <property name="port" value="${redis.port}"/>
        <property name="hostName" value="${redis.host}"/>
        <property name="password" value="${redis.password}"/>
        <property name="timeout" value="${redis.timeout}"/>
    </bean>

    <!--redisTemplate组装-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <!--既然是用String存储字符串，就指定Spring的String序列化器即可，JDK的序列化器会添加乱码\xAC\xED\x00\x05t\x00\x010-->
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

    <!-- 指定要进行事务管理的数据源，并且注入txAdvice -->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"-->
          <!--p:dataSource-ref="dataSource"/>-->


    <!-- 事务管理 通知 ，采用XML而不是注解来管理事务-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--
          propagation:事务传播行为
          isolation：事务隔离
          read-only:只读
          rollback-for:发生哪些异常回滚
          no-rollback-for:发生哪些异常不回滚
          timeout:过期信息
       -->
            <!-- 对修改数据的方法进行事务管理,只要有异常就回滚 -->
            <!--<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>-->
            <!--<tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>-->
            <!-- 获取数据的方法开启只读,提高数据库访问性能 -->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="list*" read-only="true"/>-->
            <!-- 对其他方法 使用默认的事务管理 -->
            <!--<tx:method name="*"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!-- 事务 aop 配置 -->
    <!--<aop:config>-->
        <!--1、execution(): 表达式主体。-->
        <!--2、第一个*号：表示返回类型，*号表示所有的类型。-->
        <!--3、包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包下所有类的方法。-->
        <!--4、第二个*号：表示类名，*号表示所有的类。-->
        <!--5、*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。-->
        <!--<aop:pointcut id="serviceMethods" expression="execution(* top.mothership.cabbage.service(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>-->
    <!--</aop:config>-->



</beans>